{"data":{"issue":{"id":"9a0d2dac-cd40-4dbf-b6e7-9501990a6af9","title":"boc66 M4-T4 Self-Contained Agent Enhancement","description":"はい、承知いたしました。M4-T4のIssueに関する目的と手順書を作成します。\n\n📜 Issue: M4-T4 Self-Contained Agent Enhancement\n\n🎯 目的 (Objective)\n\nagent.shスクリプトを完全に自己完結させ、あらゆる環境で単体で動作するように機能を強化する。\n\n現在のagent.shは、\\~/.linear-utils.sh という外部スクリプトに依存してLinear APIとの通信を行っています。このタスクではその依存を解消し、agent.sh自体に必要なAPI通信機能（curlとjqを使用）を直接組み込みます。\n\nこれにより、リポジトリをクローンしてagent.shを実行するだけで、環境構築や追加設定なしにタスクを処理できる真の自律型エージェントを実現します。\n\n📝 手順書 (Procedure)\n\nStep 1: 外部スクリプト依存の排除\n\n \\* agent.shを開き、\\~/.linear-utils.shを呼び出している箇所をすべて特定します。\n\n   \\* \\~/.linear-utils.sh get \\[ISSUE_ID\\] (Issue詳細取得)\n\n   \\* \\~/.linear-utils.sh comment \\[ISSUE_ID\\] \\[MESSAGE\\] (コメント投稿)\n\n \\* これらの呼び出しを、curlコマンドを使ってLinear GraphQL APIを直接叩く処理に置き換えます。\n\nStep 2: Linear API通信機能の実装\n\n \\* Issue詳細取得機能の実装:\n\n   \\* ISSUE_IDを引数として受け取り、Linear APIにissueクエリをPOSTする関数をagent.sh内に作成します。\n\n   \\* APIからのレスポンス（JSON形式）をjqでパースし、必要な情報（タイトル、説明文など）を変数に格納します。\n\n   \\* APIキー（\\~/.linear-api-key）の存在チェックと、認証失敗時のエラーハンドリングを実装します。\n\n \\* コメント投稿機能の実装:\n\n   \\* ISSUE_IDと投稿メッセージを引数として受け取り、Linear APIにcommentCreateミューテーションをPOSTする関数を作成します。\n\n   \\* 投稿成功・失敗を判定し、結果を標準出力に表示する処理を実装します。\n\nStep 3: 動作検証 (Testing)\n\n \\* 正常系テスト:\n\n   \\* 実在するIssue IDを指定して bash agent.sh do \\[ISSUE_ID\\] を実行し、Issueの取得から処理、完了報告コメントの投稿までが一気通貫で成功することを確認します。\n\n \\* 異常系テスト:\n\n   \\* 存在しないIssue IDを指定し、スクリプトがエラーメッセージを出力して正常に終了することを確認します。\n\n   \\* 一時的にAPIキーを無効なものに変更し、認証エラーが正しくハンドリングされることを確認します。\n\nStep 4: 完了報告\n\n \\* 変更内容をGitでコミットし、リモートリポジトリにプッシュします。\n\n \\* 本Issue（M4-T4）に対して、実装した新しいagent.sh自身を使って完了報告のコメントを投稿します。","state":{"name":"In Progress"}}}}
